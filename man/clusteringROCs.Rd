% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clusteringROCs.R
\name{clusteringROCs}
\alias{clusteringROCs}
\title{clusteringROCs}
\usage{
clusteringROCs(
  partitions,
  dataset = NULL,
  distance = NULL,
  distanceMethod = "euclidean",
  showPlot = TRUE,
  decoratePlot = TRUE,
  alphaPlot = TRUE,
  rLine = TRUE,
  sample = TRUE,
  sampleSize = 5000
)
}
\arguments{
\item{partitions}{A list of partitions.}

\item{dataset}{The dataset from which the partitions were obtained.}

\item{distance}{The distances between object pairs. This should be obtained with the dist function (please, see ?dist).}

\item{distanceMethod}{The distance method that should be employed to compute distances from the dataset (please, check ?dist for more information on options). This parameter is used only if distance is not provided, given that they should be computed internally by the clusteringROCs function from the dataset.}

\item{showPlot}{Defines whether the plot should be displayed by the function or not.}

\item{decoratePlot}{Whether the plot should be decorated with the best AUCC values or not.}

\item{alphaPlot}{If TRUE, the intensity of the ROC Curves will be proportional to their AUCC. Otherwise, all ROC Curves will be plotted with the same intensity (alpha/transparency).}

\item{rLine}{Whether to plot or not the random line that accounts for a random clustering solution.}

\item{sample}{Defines if all FPR and TPR should be used to generate the plot (slower), or just a subsample (faster).}

\item{sampleSize}{If sample=TRUE, defines the number of FPR and TPR pairs that will be used to generate the plot.}
}
\value{
Returns a 'clusteringROCs' object containing three fields:
\itemize{
\item auccs: The corresponding values of AUCC for each one of the partitions in the list provided as input.
\item rocplot: A ROC Plot, with one curve for each one of the partitions provided in the input list.
\item auccplot: A Plot of the k values x AUCC values.
}
}
\description{
Given a list of partitions computes their AUCC and corresponding ROC Curves.
}
\details{
Function computes the Area Under the (ROC) Curve for Clustering (AUCC) of a clustering solution.

You need to provide a partitioning of the data (clustering solution) and one of the following:
(i)   the dataset from which the partition is originated;
(ii)  the distance matrix from which the partition was originated.

In case of (i), you may also specify the distance function that will be employed to
compute the distances internally by aucc, using the distanceMethod parameter. If you do not
specify any string, it defaults to the Euclidean Distance. Make sure to pass strings accepted
by the function dist (package stats).

In case of (ii), make sure that the distance matrix was originated/converted with the function
dist from the package stats, using the parameters diag = FALSE, upper = FALSE (these are the
defaults for dist). Other than that, you may choose any distance / dissimilarity you find
appropriate for your data. If you have to perform multiple computations of aucc for the same
dataset, with different partitions, prefer this approach as computing the distance matrix
is computationally expensive.

Make sure to validate your partition with the same distance you used to generate it.
}
\examples{

set.seed(666)

partitions <- list()

#varying k in a reasonable range...
for (k in 2:ceiling(sqrt(dim(ruspini)[1]))) {
   partitions <- append(partitions,list(kmeans(ruspini,k)$cluster))
}
res <- clusteringROCs(partitions,dataset = ruspini,show = FALSE, decorate = TRUE, alphaPlot = FALSE)

require(patchwork) #for combining the plots.
res$auccplot + res$rocplot

# Now we just add more and more partitions to the list, with same number of k
# Same

for (r in 1:10) {
   for (k in 2:ceiling(sqrt(dim(ruspini)[1]))) {
      partitions <- append(partitions,list(kmeans(ruspini,k)$cluster))
   }
}

res <- clusteringROCs(partitions,dataset = ruspini,show = FALSE, decorate = TRUE, alphaPlot = FALSE)


# Plot the dataset colored with the best partition labels
dataPlot <- ggplot(ruspini) + geom_point(aes(x,y),color=as.integer(partitions[[which.max(res$auccs)]])) + theme_minimal()

require(patchwork) #for combining the plots.
dataPlot + res$auccplot + res$rocplot


}
\references{
Jaskowiak, P.A., Costa, I.G. & Campello, R.J.G.B. The area under the ROC curve as a measure of clustering quality. Data Mining and Knowledge Discovery 36, 1219â€“1245 (2022). \url{https://doi.org/10.1007/s10618-022-00829-0}.
}
